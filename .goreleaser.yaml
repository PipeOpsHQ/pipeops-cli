# .goreleaser.yml
# Adapted from the GitHub CLI example, but switched to "pipeops" everywhere.
version: 2

project_name: pipeops

release:
  # If your semver tag has a pre-release suffix (e.g. v1.2.3-beta),
  # GoReleaser marks the release as a prerelease automatically.
  prerelease: auto
  # Keep the release in 'draft' mode so you can check artifacts before publishing.
  draft: true
  name_template: "PipeOps CLI {{.Version}}"

# before:
  # hooks:
    # # On Windows, 'make' might not be available, so skip with 'echo'
    # - >-
    #   {{ if eq .Runtime.Goos "windows" }}echo{{ else }}make{{ end }}
    #   completions

builds:
  # -------------------- macOS Build -----------------------
  - id: macos
    goos: [darwin]
    goarch: [amd64, arm64]
    # binary: bin/pipeops
    # main: ./
    ldflags:
      - -s -w \
        -X github.com/PipeOpsHQ/pipeops-cli/internal/build.Version={{.Version}} \
        -X github.com/PipeOpsHQ/pipeops-cli/internal/build.Date={{ time "2006-01-02" }}
    # hooks:
    #   post:
    #     - cmd: ./script/sign '{{ .Path }}'
    #       output: true

  # -------------------- Linux Build -----------------------
  - id: linux
    goos: [linux]
    goarch: ["386", arm, amd64, arm64]
    env:
      - CGO_ENABLED=0
    # binary: bin/pipeops
    # main: ./
    ldflags:
      - -s -w \
        -X github.com/PipeOpsHQ/pipeops-cli/internal/build.Version={{.Version}} \
        -X github.com/PipeOpsHQ/pipeops-cli/internal/build.Date={{ time "2006-01-02" }}

  # -------------------- Windows Build ---------------------
  - id: windows
    goos: [windows]
    goarch: ["386", amd64, arm64]
    # binary/: bin/pipeops
    # main: ./cmd/pipeops
    ldflags:
      - -s -w \
        -X github.com/PipeOpsHQ/pipeops-cli/internal/build.Version={{.Version}} \
        -X github.com/PipeOpsHQ/pipeops-cli/internal/build.Date={{ time "2006-01-02" }}
    hooks:
      post:
        - cmd: >-
            {{ if eq .Runtime.Goos "windows" }}pwsh .\script\sign.ps1{{ else }}./script/sign{{ end }}
            '{{ .Path }}'
          output: true

# ----------------------- Archives -------------------------
archives:
  - id: linux-archive
    builds: [linux]
    name_template: "pipeops_{{ .Version }}_linux_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}"
    format: tar.gz
    wrap_in_directory: true
    # rlcp: true
    files:
      - LICENSE
      # - ./share/man/man1/pipeops*.1

  - id: macos-archive
    builds: [macos]
    name_template: "pipeops_{{ .Version }}_macOS_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}"
    format: zip
    wrap_in_directory: true
    # rlcp: true
    files:
      - LICENSE
      # - ./share/man/man1/pipeops*.1

  - id: windows-archive
    builds: [windows]
    name_template: "pipeops_{{ .Version }}_windows_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}"
    format: zip
    wrap_in_directory: false
    # rlcp: true
    files:
      - LICENSE

# -------------------- Linux Packages (.deb, .rpm) ---------
nfpms:
  - license: MIT
    maintainer: PipeOps
    homepage: https://github.com/PipeOpsHQ/pipeops-cli
    bindir: /usr
    dependencies:
      - git
    description: PipeOps CLI - Official command line tool for PipeOps.
    formats:
      - deb
      - rpm
    contents:
      - src: "./share/man/man1/pipeops*.1"
        dst: "/usr/share/man/man1"
      - src: "./share/bash-completion/completions/pipeops"
        dst: "/usr/share/bash-completion/completions/pipeops"
      - src: "./share/fish/vendor_completions.d/pipeops.fish"
        dst: "/usr/share/fish/vendor_completions.d/pipeops.fish"
      - src: "./share/zsh/site-functions/_pipeops"
        dst: "/usr/share/zsh/site-functions/_pipeops"
