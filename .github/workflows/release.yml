name: Release

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: false
        type: string

permissions:
  contents: write
  packages: write
  pull-requests: read
  issues: read
  actions: write

jobs:
  # Test before release
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Run tests
        run: |
          go test -v ./...
          go vet ./...

      - name: Check build
        run: |
          go build -v .

  # Create release
  release:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Configure Git
        run: |
          git config user.name "pipeops-bot"
          git config user.email "bot@pipeops.io"

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            # Auto-increment version
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            echo "Latest tag: $LATEST_TAG"

            # Extract version numbers
            MAJOR=$(echo $LATEST_TAG | sed 's/v//' | cut -d. -f1)
            MINOR=$(echo $LATEST_TAG | sed 's/v//' | cut -d. -f2)
            PATCH=$(echo $LATEST_TAG | sed 's/v//' | cut -d. -f3)

            # Increment patch version
            PATCH=$((PATCH + 1))
            VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version to release: $VERSION"

      - name: Create and push tag
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.version == ''
        run: |
          VERSION=${{ steps.version.outputs.version }}
          git tag -a $VERSION -m "Release $VERSION"
          git push origin $VERSION

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v4
        with:
          install-only: true
          version: latest

      - name: Run GoReleaser
        run: |
          goreleaser release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_GITHUB_TOKEN }}
          # AUR_KEY: ${{ secrets.AUR_KEY }}

  # Publish Docker images
  docker:
    needs: [test, release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/pipeops/pipeops-cli:latest
            ghcr.io/pipeops/pipeops-cli:${{ needs.release.outputs.version }}
          labels: |
            org.opencontainers.image.title=PipeOps CLI
            org.opencontainers.image.description=Official command line tool for PipeOps
            org.opencontainers.image.url=https://github.com/PipeOpsHQ/pipeops-cli
            org.opencontainers.image.source=https://github.com/PipeOpsHQ/pipeops-cli
            org.opencontainers.image.version=${{ needs.release.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=MIT

  # Update installation instructions
  update-docs:
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README with latest version
        run: |
          VERSION=${{ needs.release.outputs.version }}
          # Update installation URLs in README
          sed -i "s|releases/download/v[0-9]*\.[0-9]*\.[0-9]*|releases/download/$VERSION|g" README.md

          # Update version references
          sed -i "s|pipeops-cli@v[0-9]*\.[0-9]*\.[0-9]*|pipeops-cli@$VERSION|g" README.md

      - name: Commit documentation updates
        run: |
          git config user.name "pipeops-bot"
          git config user.email "bot@pipeops.io"

          if git diff --quiet; then
            echo "No documentation changes to commit"
          else
            git add README.md
            git commit -m "docs: update installation links for ${{ needs.release.outputs.version }}"
            git push
          fi

  # Notify on completion
  notify:
    needs: [release, docker, update-docs]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify success
        if: needs.release.result == 'success' && needs.docker.result == 'success'
        run: |
          echo "üéâ Successfully released PipeOps CLI ${{ needs.release.outputs.version }}"
          echo "üì¶ Binaries: https://github.com/PipeOpsHQ/pipeops-cli/releases/tag/${{ needs.release.outputs.version }}"
          echo "üê≥ Docker: ghcr.io/pipeops/pipeops-cli:${{ needs.release.outputs.version }}"

      - name: Notify failure
        if: failure()
        run: |
          echo "‚ùå Release failed for version ${{ needs.release.outputs.version }}"
          echo "Check the workflow logs for details."
